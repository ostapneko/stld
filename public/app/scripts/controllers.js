// Generated by CoffeeScript 1.4.0
(function() {

  angular.module('stldApp.controllers', []).controller('TaskCtrl', [
    '$scope', '$http', 'taskService', function($scope, $http, taskService) {
      $scope.alert = "";
      $scope.tasksDisplayed = {
        unique: true,
        recurring: true
      };
      $scope.taskFilter = "thisWeek";
      $scope.createMode = {
        unique: false,
        recurring: false
      };
      $scope.newTaskDescription = "";
      $scope.newTaskFrequency = "";
      $scope.getTasks = function() {
        return taskService.getTasks().then(function(tasks) {
          $scope.uniqueTasks = tasks.unique;
          return $scope.recurringTasks = tasks.recurring;
        }, function(error) {
          return $scope.alert = error;
        });
      };
      $scope.startNewSprint = function() {
        return taskService.startNewSprint().then(function(response) {
          $scope.newSprintAllowed();
          return $scope.getTasks();
        }, function(error) {
          return $scope.alert = error;
        });
      };
      $scope.createUniqueTask = function(description) {
        var payload;
        payload = {
          description: description,
          active: $scope.isThisWeekDisplayed()
        };
        return taskService.createUnique(payload).then(function(task) {
          $scope.uniqueTasks.push(task);
          $scope.toggleCreateMode('unique');
          return $scope.newTaskDescription = "";
        }, function(error) {
          return $scope.alert = error;
        });
      };
      $scope.createRecurringTask = function(description, frequency) {
        var payload;
        payload = {
          description: description,
          active: $scope.isThisWeekDisplayed(),
          frequency: frequency,
          enabled: true
        };
        return taskService.createRecurring(payload).then(function(task) {
          $scope.recurringTasks.push(task);
          $scope.toggleCreateMode('recurring');
          $scope.newTaskDescription = "";
          return $scope.newTaskFrequency = "";
        }, function(error) {
          return $scope.alert = error;
        });
      };
      $scope.updateTask = function(type, task) {
        var payload;
        payload = {
          id: task.id,
          description: task.tempDescription,
          active: task.active,
          frequency: type === "recurring" ? task.tempFrequency : void 0
        };
        return taskService.update(type, task, payload)["catch"](function(error) {
          return $scope.alert = error;
        });
      };
      $scope.setAsDone = function(task) {
        var payload;
        payload = {
          id: task.id,
          description: task.description,
          frequency: task.frequency,
          status: "done"
        };
        return taskService.update("recurring", task, payload)["catch"](function(error) {
          return $scope.alert = error;
        });
      };
      $scope.deleteTask = function(type, task) {
        return taskService["delete"](type, task).then(function(task) {
          var i, tasks;
          tasks = type === "unique" ? $scope.uniqueTasks : $scope.recurringTasks;
          i = tasks.indexOf(task);
          return tasks.splice(i, 1);
        }, function(error) {
          return $scope.alert = error;
        });
      };
      $scope.isThisWeekDisplayed = function() {
        return $scope.taskFilter === "thisWeek";
      };
      $scope.toggleActivity = function(task) {
        var payload;
        payload = {
          id: task.id,
          description: task.description,
          active: !task.active
        };
        return taskService.update("unique", task, payload)["catch"](function(error) {
          return $scope.alert = error;
        });
      };
      $scope.setFilter = function(f) {
        $scope.tasksDisplayed = {
          unique: true,
          recurring: true
        };
        return $scope.taskFilter = f;
      };
      $scope.filterTask = function() {
        return {
          active: $scope.isThisWeekDisplayed()
        };
      };
      $scope.toggleDisplay = function(prop) {
        return $scope.tasksDisplayed[prop] = !$scope.tasksDisplayed[prop];
      };
      $scope.toggleCreateMode = function(taskType) {
        return $scope.createMode[taskType] = !$scope.createMode[taskType];
      };
      $scope.alertPresent = function() {
        return $scope.alert.length > 0;
      };
      $scope.removeAlert = function() {
        return $scope.alert = "";
      };
      $scope.sprintFinished = false;
      $scope.newSprintAllowed = function() {
        return taskService.newSprintAllowed().success(function(data, status, headers, config) {
          return $scope.sprintFinished = data.sprint_finished;
        });
      };
      $scope.newSprintAllowed();
      return $scope.getTasks();
    }
  ]);

}).call(this);
