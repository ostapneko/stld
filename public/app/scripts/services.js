// Generated by CoffeeScript 1.4.0
(function() {
  var RecurringTask, Task, UniqueTask,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Task = (function() {

    function Task() {}

    Task.prototype.cancelEdit = function() {
      this.mode = 'show';
      return this.tempDescription = this.description;
    };

    Task.prototype.addEditMode = function() {
      return this.mode = 'edit';
    };

    return Task;

  })();

  UniqueTask = (function(_super) {

    __extends(UniqueTask, _super);

    function UniqueTask(id, description, active, mode, tempDescription) {
      this.id = id;
      this.description = description;
      this.active = active;
      this.mode = mode;
      this.tempDescription = tempDescription;
    }

    UniqueTask.prototype.displayAction = function() {
      if (this.active) {
        return "Postpone";
      } else {
        return "To Sprint";
      }
    };

    UniqueTask.prototype.update = function(params) {
      this.description = params.description;
      this.active = params.active;
      this.tempDescription = params.description;
      return this.mode = 'show';
    };

    return UniqueTask;

  })(Task);

  RecurringTask = (function(_super) {

    __extends(RecurringTask, _super);

    function RecurringTask(id, description, active, frequency, mode, status, tempDescription, tempFrequency) {
      this.id = id;
      this.description = description;
      this.active = active;
      this.frequency = frequency;
      this.mode = mode;
      this.status = status;
      this.tempDescription = tempDescription;
      this.tempFrequency = tempFrequency;
    }

    RecurringTask.prototype.update = function(params) {
      this.description = params.description;
      this.frequency = params.frequency;
      this.mode = "show";
      this.tempDescription = params.description;
      this.tempFrequency = params.frequency;
      this.status = params.status;
      return this.active = params.active || this.status === "todo";
    };

    return RecurringTask;

  })(Task);

  angular.module('stldApp.services', []).factory('taskService', [
    '$http', '$q', function($http, $q) {
      var service;
      service = {};
      service.getTasks = function() {
        return $http.get('/tasks').then(function(response) {
          var recurringTasks, t, uniqueTasks;
          uniqueTasks = (function() {
            var _i, _len, _ref, _results;
            _ref = response.data.uniqueTasks;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              t = _ref[_i];
              _results.push(new UniqueTask(t.id, t.description, t.active, 'show', t.description));
            }
            return _results;
          })();
          recurringTasks = (function() {
            var _i, _len, _ref, _results;
            _ref = response.data.recurringTasks;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              t = _ref[_i];
              _results.push(new RecurringTask(t.id, t.description, t.active, t.frequency, 'show', t.status, t.description, t.frequency));
            }
            return _results;
          })();
          return {
            unique: uniqueTasks,
            recurring: recurringTasks
          };
        }, function(response) {
          return $q.reject(response.data.error_message);
        });
      };
      service.createUnique = function(payload) {
        return $http.post("/unique-task", payload).then(function(response) {
          var t;
          t = response.data.task;
          return new UniqueTask(t.id, t.description, t.active, 'show', t.description);
        }, function(response) {
          return $q.reject(response.data.error_message);
        });
      };
      service.createRecurring = function(payload) {
        return $http.post("/recurring-task", payload).then(function(response) {
          var t;
          t = response.data.task;
          return new RecurringTask(t.id, t.description, t.active, t.frequency, 'show', t.status, t.description, t.frequency);
        }, function(response) {
          return $q.reject(response.data.error_message);
        });
      };
      service.update = function(type, task, payload) {
        return $http.put("/" + type + "-task/" + task.id, payload).then(function(response) {
          return task.update(payload);
        }, function(response) {
          return $q.reject(response.data.error_message);
        });
      };
      service["delete"] = function(type, task) {
        return $http["delete"]("/" + type + "-task/" + task.id).then(function(response) {
          return task;
        }, function(response) {
          return $q.reject(response.data.error_message);
        });
      };
      service.newSprintAllowed = function() {
        return $http.get("/new_sprint_allowed");
      };
      service.startNewSprint = function() {
        return $http.post("/start-new-sprint");
      };
      return service;
    }
  ]);

}).call(this);
